<?php

namespace AppBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Ivory\CKEditorBundle\Form\Type\CKEditorType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use AppBundle\Entity\Product;

/**
 * Description of ProductController
 *
 * @author Rafał
 */
class ProductController extends Controller {

    /**
     * @Route("/cms/product/create", name="product_create") 
     */
    public function createProductAction(Request $request) {

        $product = new Product();


        $form = $this->createFormBuilder($product)
                ->add('title', TextType::class, array(
                    'attr' => array('class' => 'form-control'),
                ))
                ->add('descript', CKEditorType::class, array(
                    'attr' => array('class' => 'form-control')
                ))
                ->add('brochure', FileType::class, array(
                    'label' => 'Załącz plik (PDF)'
                ))
                ->add('image', FileType::class, array(
                    'label' => 'Foto'
                ))
               
                ->add('Dodaj Produkt', SubmitType::class, array(
                    'attr' => array('class' => 'btn btn-info btn-block', 'style' => 'margin-top: 20px;'),
                ))
                ->getForm();

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $product = $form->getData();            


            $file = $product->getBrochure();
            $fileImage = $product->getImage();


            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $fileImageName = $this->generateUniqueFileName() . '.' . $fileImage->guessExtension();

            $file->move(
                    $this->getParameter('brochures_directory'), $fileName
            );

            $fileImage->move(
                    $this->getParameter('images_directory'), $fileImageName
            );

            $product->setBrochure($fileName);
            $product->setImage($fileImageName);

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($product);
            $entityManager->flush();

            return $this->redirectToRoute('cms_panel');
        }

        return $this->render('cms/create.html.twig', [
                    'form' => $form->createView()
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName() {
// md5() reduces the similarity of the file names generated by
// uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/", name="homepage") 
     */
    public function allProductAction() {

        $produkty = $this->getDoctrine()->getRepository('AppBundle:Product')->findAll();

// dump($produkty); die();

        return $this->render('karcher/index.html.twig', [
                    'produkty' => $produkty
        ]);
    }

    /**
     * @Route("cms/product/update/{id}", name="update_product")
     */
    public function updateProductAction(Request $request, $id) {

        $product = new Product();


        $product = $this->getDoctrine()->getRepository('AppBundle:Product')->find($id);

        if (!$product) {
            throw $this->createNotFoundException(
                    'Nie ma takiego produktu numerze: ' . $id
            );
        }

        $form = $this->createFormBuilder($product)
                ->add('title', TextType::class, array(
                    'attr' => array('class' => 'form-control'),
                ))
                ->add('descript', CKEditorType::class, array(
                    'attr' => array('class' => 'form-control')
                ))
                ->add('brochure', FileType::class, array(
                    'label' => 'Załącz plik (PDF)',
                    'data_class' => null
                ))
                ->add('image', FileType::class, array(
                    'label' => 'Załącz zdjęcie',
                    'data_class' => null
                ))
                ->add('Edytuj Produkt', SubmitType::class, array(
                    'attr' => array('class' => 'btn btn-warning btn-block', 'style' => 'margin-top: 20px;'),
                ))
                ->getForm();

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $product = $form->getData();

            $file = $product->getBrochure();
            $fileImage = $product->getImage();


            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $fileImageName = $this->generateUniqueFileName() . '.' . $fileImage->guessExtension();

            $file->move(
                    $this->getParameter('brochures_directory'), $fileName
            );

            $fileImage->move(
                    $this->getParameter('images_directory'), $fileImageName
            );

            $product->setBrochure($fileName);
            $product->setImage($fileImageName);




            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($product);
            $entityManager->flush();

            return $this->redirectToRoute('cms_panel');
        }


        return $this->render('cms/update.html.twig', [
                    'form' => $form->createView()
        ]);
    }

    /**
     * @Route("/cms/produkt/delete/{id}", name="delete_product") 
     */
    public function deleteProductAction($id, Request $request) {

        $em = $this->getDoctrine()->getManager();

        $product = $em->getRepository('AppBundle:Product')->findOneBy(array('id' => $id));

        $em->remove($product);
        $em->flush();

        return $this->redirectToRoute('cms_panel');
    }

}
